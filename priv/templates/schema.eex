defmodule <%= inspect(@module) %> do
  @moduledoc """
  <%= @docstring %>
  """

  <%= if length(@operations) > 0 do %>
    @default_client <%= inspect(@default_client) %> 
  <% end %>

  <%= if length(@fields) > 0 do %>
    defstruct [
      <%= for {name, _type} <- @fields do %>
        :<%= inspect(name) %>,
      <% end %>
    ]

    @doc false
    @spec __fields__ :: keyword
    def __fields__ do
      [
      <%= for {name, type} <- @fields do %>
        <%= inspect(name) %>: <%= inspect(type) %>,
      <% end %>
      ]
    end
  <% end %>
  
  <%= for operation <- @operations do %>
@doc """
<%= operation.summary %><%= if operation.docs && operation.docs.url do %>
<%= if operation.docs.description do %>
Additional documentation for this endpoint is available here: [<%= operation.docs.description %>](<%= operation.docs.url %>).<% else %>
Additional documentation for this endpoint is available [here](<%= operation.docs.url %>).<% end %><% else %>

<%= String.replace(operation.description, "\"\"\"", "\\\"\\\"\\\"") %><% end %><%= if length(operation.query_params) > 0 do %>

## Options
<%= for {name, description, typespec} <- operation.query_params do %>
  * `<%= name %>` (`<%= typespec %>`): <%= description %><% end %>
<% end %>
"""
    @spec <%= operation.name %>(<%= for {_, _, type} <- operation.path_params, do: "#{type}, " %> <%= if operation.body, do: Enum.join(operation.body, " | ") <> "," %> keyword) :: {:ok, term} | {:error, term}
    def <%= operation.name %>(<%= for {name, _, _} <- operation.path_params, do: "#{name}, " %> <%= if operation.body, do: "body, " %> opts \\ []) do
      client = opts[:client] || @default_client<%= if length(operation.query_params) > 0 do %>
        query = Keyword.take(opts, [<%= Enum.map_join(operation.query_params, ", ", fn {name, _description, _typespec} -> ":#{name}" end) %>])
      <% end %>

      client.request(%{
        url: "<%= String.replace(operation.path, ~r/\{([[:word:]]+)\}/, "#\{\\1\}") %>",
        method: <%= inspect(operation.method) %>,<%= if operation.body do %>
        body: body,<% end %><%= if length(operation.query_params) > 0 do %>
        query: query,<% end %><%= if length(operation.responses) > 0 do %>
        response: [<%= for {status, type} <- operation.responses do %>
          {<%= status %>, <%= inspect(type) %>},
        <% end %>
        ],<% end %>
        opts: opts
      })
    end
  <% end %>
end
